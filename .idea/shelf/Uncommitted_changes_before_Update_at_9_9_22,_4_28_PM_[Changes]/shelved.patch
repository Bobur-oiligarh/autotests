Index: api_mobile/response_data_types/references/available_languages.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import allure\n\nfrom api_mobile.response_data_types.response_data_base import BaseType, BaseTypeParent\n\n\nclass AvailableLanguages(BaseTypeParent):\n    def __init__(self, data: list):\n        super().__init__()\n        self.lang_list: list = self.deserialize_langs(data)\n\n    @staticmethod\n    def deserialize_langs(data) -> list:\n        result = []\n        for lang in data:\n            result.append(Language(lang))\n        return result\n\n    def set_data_to(self, obj):\n        self.set_langs(obj)\n\n    def set_langs(self, client):\n        client.lang_list = self\n\n    def check(self, client, **kwargs):\n        self.check_all_languages(client, **kwargs)\n\n    def check_all_languages(self, client, **kwargs):\n        for lang in self.lang_list:\n            with allure.step(f\"Проверка параметров lang {lang.name}\"):\n                lang.check(client, **kwargs)\n\n\nclass Language(BaseType):\n\n    def __init__(self, data):\n        super().__init__()\n        self.lang_code = data[\"lang_code\"]\n        self.name = data[\"name\"]\n\n    def check(self, client, **kwargs):\n        self.lang_code_not_empty()\n        self.name_not_empty()\n\n    @allure.step(\"lang_code не пустой\")\n    def lang_code_not_empty(self):\n        self._tc.assertNotEqual(self.lang_code, \"\",\n                                f\"lang_code ({self.lang_code}) пустой\" + self.__str__())\n\n    @allure.step(\"name не пустой\")\n    def name_not_empty(self):\n        self._tc.assertNotEqual(self.name, \"\",\n                                f\"name ({self.name}) пустой\" + self.__str__())\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api_mobile/response_data_types/references/available_languages.py b/api_mobile/response_data_types/references/available_languages.py
--- a/api_mobile/response_data_types/references/available_languages.py	(revision 864a91f3ec8f8cd729165366ddf22db8e736d443)
+++ b/api_mobile/response_data_types/references/available_languages.py	(date 1662709098079)
@@ -41,12 +41,4 @@
         self.lang_code_not_empty()
         self.name_not_empty()
 
-    @allure.step("lang_code не пустой")
-    def lang_code_not_empty(self):
-        self._tc.assertNotEqual(self.lang_code, "",
-                                f"lang_code ({self.lang_code}) пустой" + self.__str__())
 
-    @allure.step("name не пустой")
-    def name_not_empty(self):
-        self._tc.assertNotEqual(self.name, "",
-                                f"name ({self.name}) пустой" + self.__str__())
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (hamkor_auto_tests)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 864a91f3ec8f8cd729165366ddf22db8e736d443)
+++ b/.idea/misc.xml	(date 1662629428720)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (hamkor_auto_tests)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (hamkorautotests) (2)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>allure-pytest==2.9.45\nallure-python-commons==2.9.45\nattrs==22.1.0\ncertifi==2022.6.15\ncharset-normalizer==2.1.0\ngreenlet==1.1.2\nidna==3.3\niniconfig==1.1.1\npackaging==21.3\npluggy==1.0.0\npsycopg2==2.9.3\npy==1.11.0\npyparsing==3.0.9\npytest==7.1.2\nrequests==2.28.1\nsix==1.16.0\nSQLAlchemy==1.4.40\nSQLAlchemy-Utils==0.38.3\ntomli==2.0.1\nurllib3==1.26.11\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 864a91f3ec8f8cd729165366ddf22db8e736d443)
+++ b/requirements.txt	(date 1662629624648)
@@ -8,7 +8,7 @@
 iniconfig==1.1.1
 packaging==21.3
 pluggy==1.0.0
-psycopg2==2.9.3
+#psycopg2==2.9.3
 py==1.11.0
 pyparsing==3.0.9
 pytest==7.1.2
Index: utils/universal_steps/check_response.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import allure\n\nfrom api_mobile.test_data.client import Client\nfrom utils.api_utils.test_response import TestResponse\nfrom unittest import TestCase\n\n\n@allure.step(\"Проверка ответа\")\ndef check_response(response: TestResponse, client: Client, expired_status: str = \"Success\", **kwargs):\n    check_response_status(response, expired_status)\n    check_response_data_not_none(response)\n    check_response_data(response, client, **kwargs)\n\n\n@allure.step(\"Проверка статуса ответа\")\ndef check_response_status(response: TestResponse, expired_status: str = \"Success\"):\n    tc = TestCase()\n    tc.assertEqual(response.status, expired_status,\n                   f\"Статус ответа ({response.status}) не соответствует \"\n                   f\"ожидаемому ({expired_status})\" + response.__str__())\n\n\n@allure.step(\"Проверка data ответа\")\ndef check_response_data_not_none(response: TestResponse):\n    tc = TestCase()\n    tc.assertIsNotNone(response.data, f\"Параметр data ответа является None\" + response.__str__())\n\n\n@allure.step(\"Проверка параметров данных ответа\")\ndef check_response_data(response: TestResponse, client: Client, **kwargs):\n    response.data.check(client, **kwargs)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utils/universal_steps/check_response.py b/utils/universal_steps/check_response.py
--- a/utils/universal_steps/check_response.py	(revision 864a91f3ec8f8cd729165366ddf22db8e736d443)
+++ b/utils/universal_steps/check_response.py	(date 1662709098079)
@@ -6,18 +6,18 @@
 
 
 @allure.step("Проверка ответа")
-def check_response(response: TestResponse, client: Client, expired_status: str = "Success", **kwargs):
-    check_response_status(response, expired_status)
+def check_response(response: TestResponse, client: Client, expected_status: str = "Success", **kwargs):
+    check_response_status(response, expected_status)
     check_response_data_not_none(response)
     check_response_data(response, client, **kwargs)
 
 
 @allure.step("Проверка статуса ответа")
-def check_response_status(response: TestResponse, expired_status: str = "Success"):
+def check_response_status(response: TestResponse, expected_status: str = "Success"):
     tc = TestCase()
-    tc.assertEqual(response.status, expired_status,
+    tc.assertEqual(response.status, expected_status,
                    f"Статус ответа ({response.status}) не соответствует "
-                   f"ожидаемому ({expired_status})" + response.__str__())
+                   f"ожидаемому ({expected_status})" + response.__str__())
 
 
 @allure.step("Проверка data ответа")
